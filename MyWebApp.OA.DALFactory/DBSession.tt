<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#> 
<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\\MyWebApp.OA.Model\\Model1.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>
using MyWebApp.OA.DAL;
using MyWebApp.OA.IDAL;
using MyWebApp.OA.Model;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyWebApp.OA.DALFactory
{
   
   public partial class DBSession:IDBSession
   {
<#
// Emit Entity Types

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    //fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");
    //BeginNamespace(namespaceName, code);    
#>	
	  private I<#=entity.Name#>Dal _<#=entity.Name#>Dal;
        public I<#=entity.Name#>Dal <#=entity.Name#>Dal
        {
            get {

                if (_<#=entity.Name#>Dal == null)
                {
                    _<#=entity.Name#>Dal = DALAbstractFactory.Create<#=entity.Name#>Dal();//通过抽象工厂将数据会话层与数据层解耦
                }
                return _<#=entity.Name#>Dal;
            }
            set {
                _<#=entity.Name#>Dal = value;
            }
        }
<#}#>
	}
}